# -*- coding: utf-8 -*-
"""영화 크롤링.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uPOunJD2hFvDePlbjbJeWh8AXUlbaK55
"""

import requests
import pandas as pd
from bs4 import BeautifulSoup
from tqdm import tqdm

# 연도별 통계 변수 생성

def year_statistics() :

   
    # 연도별 통계 범위 자동화

    url = 'https://www.kobis.or.kr/kobis/business/stat/them/findYearlyTotalList.do'

    headers = {'Referer': 'https://www.kobis.or.kr/kobis/business/stat/them/findYearlyTotalList.do',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36 Edg/100.0.1185.29'
    }

    data = {'CSRFToken': 'MpMHqnkVhwXicWxDDFFwcr7a_DaRPYQixLtK5I0v8Co',
            'loadVal': 0,
            'searchType': 'search'}

    resp = requests.post(url, headers=headers, data=data)
    soup = BeautifulSoup(resp.text, 'lxml')

    page_tags=soup.select("tbody tr td")

    page_tags = page_tags[::15][:-1]


    # 한국 영화
    korea_movies = {
        '연도' : [],
        '개봉편수' : [],
        '상영편수' : [],
        '매출액':[],
        '관객수':[],
        '점유율':[]
    }
    
    # 외국 영화
    overseas_movies = {
        '개봉편수' : [],
        '상영편수' : [],
        '매출액':[],
        '관객수':[],
        '점유율':[]
    }


    # 연도별 통계 크롤링

    url = 'https://www.kobis.or.kr/kobis/business/stat/them/findYearlyTotalList.do'

    headers = {'Referer': 'https://www.kobis.or.kr/kobis/business/stat/them/findYearlyTotalList.do',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36 Edg/100.0.1185.29'
    }

    data = {'CSRFToken': 'MpMHqnkVhwXicWxDDFFwcr7a_DaRPYQixLtK5I0v8Co',
            'loadVal': 0,
            'searchType': 'search'}

    resp = requests.post(url, headers=headers, data=data)
    soup = BeautifulSoup(resp.text, 'lxml')

    year_tags=soup.select("tbody tr td")

    for i in tqdm(range(int(len(page_tags))+1)):
        korea_movies['연도'].append(year_tags[::15][i].text)
        korea_movies['개봉편수'].append(year_tags[1::15][i].text)
        korea_movies['상영편수'].append(year_tags[2::15][i].text)
        korea_movies['매출액'].append(year_tags[3::15][i].text)
        korea_movies['관객수'].append(year_tags[4::15][i].text)
        korea_movies['점유율'].append(year_tags[5::15][i].text)
        
        overseas_movies['개봉편수'].append(year_tags[6::15][i].text)
        overseas_movies['상영편수'].append(year_tags[7::15][i].text)
        overseas_movies['매출액'].append(year_tags[8::15][i].text)
        overseas_movies['관객수'].append(year_tags[9::15][i].text)
        overseas_movies['점유율'].append(year_tags[10::15][i].text)

    korea_movies = pd.DataFrame(korea_movies)
    overseas_movies = pd.DataFrame(overseas_movies)

    # 전역 변수 선언
    global df_movies_all

    cols=['연도', '한국개봉편수', '한국상영편수', '한국매출액', '한국관객수','한국점유율','외국개봉편수','외국상영편수', '외국매출액', '외국관객수','외국점유율']
    df_movies_all = pd.concat([korea_movies, overseas_movies], axis=1, ignore_index=True)
    df_movies_all.columns=cols



    return df_movies_all

def year_top50() : 

    # 연도별 박스오피스 상위 50개 영화 조회기간 자동화
    url = 'https://www.kobis.or.kr/kobis/business/stat/boxs/findYearlyBoxOfficeList.do'

    resp = requests.post(url)
    soup = BeautifulSoup(resp.text, 'lxml')

    page_tags = soup.select('#sSearchYearFrom')

    page_tags = page_tags[0].text.replace(' ','').strip().split('\n')
    page_tags


    # 상위 50개 영화 목록 변수 생성

    movies = {
        '연도' : [],
        '순위' : [],
        '영화명' : [],
        '개봉일':[],
        '매출액':[],
        '매출액 점유율':[],
        '관객수':[],
        '스크린수':[],
        '상영횟수':[]
    }



    # 각 페이지별 상위 50개 영화 정보 크롤링

    for page_tag in tqdm(page_tags) :


        url = 'https://www.kobis.or.kr/kobis/business/stat/boxs/findYearlyBoxOfficeList.do'

        headers = {
            'Referer' : 'https://www.kobis.or.kr/kobis/business/stat/boxs/findYearlyBoxOfficeList.do',
            'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36'
            }

        data = {
            'CSRFToken': 'XCQ-5se9TqMZP8jykstvj9096rrEnyb25iWmmMoYVKc',
            'loadEnd': 0,
            'searchType': 'search',
            'sSearchYearFrom': page_tag,
            'sMultiMovieYn' : '',
            'sRepNationCd' : '',
            'sWideAreaCd' : ''

        }

        resp = requests.post(url, headers=headers, data=data)
        soup = BeautifulSoup(resp.text, 'lxml')

        rank_tags = soup.select('td#td_rank')
        movie_tags = soup.select('td#td_movie a')
        open_tags = soup.select('td#td_openDt')
        sales_tags = soup.select('td#td_salesAcc')
        share_tags = soup.select('td#td_salesShare')
        audi_tags = soup.select('td#td_audiAcc')
        scrn_tags = soup.select('td#td_scrnCnt')
        show_tags = soup.select('td#td_showCnt')


        for rank_tag, movie_tag, open_tag, sales_tag, share_tag, audi_tag, scrn_tag, show_tag,  in zip(rank_tags, movie_tags, open_tags, sales_tags, share_tags, audi_tags, scrn_tags, show_tags, ) :
            movies['연도'].append(page_tag)
            movies['순위'].append(rank_tag.text.strip())
            movies['영화명'].append(movie_tag['title'])
            movies['개봉일'].append(open_tag.text.strip())
            movies['매출액'].append(sales_tag.text.strip())
            movies['매출액 점유율'].append(share_tag.text.strip())
            movies['관객수'].append(audi_tag.text.strip())
            movies['스크린수'].append(scrn_tag.text.strip())
            movies['상영횟수'].append(show_tag.text.strip())

    # 전역 변수 선언
    global df_movies

    df_movies = pd.DataFrame(movies)

    # 총 19개 연도별 상위 50개 영화 데이터 추출 완료

    return df_movies





def year_top50_info():

    # 연도별 박스오피스 상위 50개 영화 조회기간 자동화
    url = 'https://www.kobis.or.kr/kobis/business/stat/boxs/findYearlyBoxOfficeList.do'

    resp = requests.post(url)
    soup = BeautifulSoup(resp.text, 'lxml')

    page_tags = soup.select('#sSearchYearFrom')

    page_tags = page_tags[0].text.replace(' ','').strip().split('\n')
    page_tags

    # 각 영화 고유 코드 추출을 위한 변수 설정

    codes =  {'연도': [],
              '코드': []}
    
    for page_tag in tqdm(page_tags) :


        url = 'https://www.kobis.or.kr/kobis/business/stat/boxs/findYearlyBoxOfficeList.do'

        headers = {
            'Referer' : 'https://www.kobis.or.kr/kobis/business/stat/boxs/findYearlyBoxOfficeList.do',
            'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.60 Safari/537.36'
            }

        data = {
            'CSRFToken': 'XCQ-5se9TqMZP8jykstvj9096rrEnyb25iWmmMoYVKc',
            'loadEnd': 0,
            'searchType': 'search',
            'sSearchYearFrom': page_tag,
            'sMultiMovieYn' : '',
            'sRepNationCd' : '',
            'sWideAreaCd' : ''

        }

        resp = requests.post(url, headers=headers, data=data)
        soup = BeautifulSoup(resp.text, 'lxml')

        codes_tags = soup.select('div.rst_sch tr td a')


        for codes_tag in codes_tags:
            codes['연도'].append(page_tag)
            codes['코드'].append(int(codes_tag['onclick'].split("'")[3]))

    df_codes=pd.DataFrame(codes)


    # 코드를 바탕으로 세부 정보 추출
    # 변수 설정

    movies_info = {
        '장르' : [],
        '러닝타임' : [],
        '제작국가' : []
    }


    codes_list = list(codes['코드'])
    codes_list


    for code_list in tqdm(codes_list) :

        url = 'https://www.kobis.or.kr/kobis/business/mast/mvie/searchMovieDtl.do'

        headers = {
                'Referer': 'https://www.kobis.or.kr/' ,
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36'
            }

        data = {
                'code': code_list,
                'sType':'',
                'titleYN': 'Y',
                'etcParam':'',
                'isOuterReq': 'false',
                'CSRFToken': 'vy1b0b624k1cPDM4WZiy36qaLSB5oGCbNRsWqBb29oA'
                
            }

        resp = requests.post(url, headers=headers, data=data)


        soup = BeautifulSoup(resp.text, 'lxml')

        # 영화 내용
        content_tags = soup.select('div.cont_tab dl dd')[3].text.replace('\t','').replace('\r','').replace('\n','').replace(' ','').split('|')

        movies_info['장르'].append(content_tags[2])
        movies_info['러닝타임'].append(content_tags[3])
        movies_info['제작국가'].append(content_tags[-1])

    movies_info = pd.DataFrame(movies_info)
    movies_info


    # 전역 변수 선언
    global df_movies_info

    # concat을 이용해 합치기
    # 영화들의 세부 정보 완료 
    df_movies_info = pd.concat([df_codes, movies_info], axis=1)

    if 'df_movies' not in globals() :
        year_top50()
    else : pass

    top50 = pd.concat([df_movies,df_movies_info], axis=1)
    return top50